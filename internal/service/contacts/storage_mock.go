// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package contacts

import (
	context "context"

	sqlstorage "github.com/Peltoche/halium/internal/tools/sqlstorage"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/Peltoche/halium/internal/tools/uuid"
)

// mockStorage is an autogenerated mock type for the storage type
type mockStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, contactID
func (_m *mockStorage) Delete(ctx context.Context, contactID uuid.UUID) error {
	ret := _m.Called(ctx, contactID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, contactID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, cmd
func (_m *mockStorage) GetAll(ctx context.Context, cmd *sqlstorage.PaginateCmd) ([]Contact, error) {
	ret := _m.Called(ctx, cmd)

	var r0 []Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlstorage.PaginateCmd) ([]Contact, error)); ok {
		return rf(ctx, cmd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlstorage.PaginateCmd) []Contact); ok {
		r0 = rf(ctx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlstorage.PaginateCmd) error); ok {
		r1 = rf(ctx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *mockStorage) GetByID(ctx context.Context, id uuid.UUID) (*Contact, error) {
	ret := _m.Called(ctx, id)

	var r0 *Contact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Contact, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Contact); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Contact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, contact, fields
func (_m *mockStorage) Patch(ctx context.Context, contact *Contact, fields map[string]interface{}) error {
	ret := _m.Called(ctx, contact, fields)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Contact, map[string]interface{}) error); ok {
		r0 = rf(ctx, contact, fields)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with given fields: ctx, c
func (_m *mockStorage) Save(ctx context.Context, c *Contact) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Contact) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockStorage creates a new instance of mockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStorage {
	mock := &mockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
